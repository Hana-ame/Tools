package com.example.tools;

import java.util.HashMap;

// 这是一个缓存
// 使用 MyFun extents Function<T> T=返回类型
// 使用 key = MyFun.hashcode() && MyFun.equals() 作为缓存key (generated by vscode -> Source actions...)
// 使用方法见 psvm 和 MyFun

public class Cache<K, V> extends HashMap<K, V> {

    public Cache() {
      super();
  }

  public V run(int a, int b, char c, String s) {
      // 检查缓存中是否存在该键
      K key = (K) Integer.valueOf(a);
      if (containsKey(key)) return get(key); // 如果存在，返回缓存的结果
      V value = (V) s;
      put(key, value); // 将新值存入缓存
      return value; // 返回传入的值
  }

  public static void main(String[] args) {
      Cache<Integer, String> cache = new Cache<>(); // 创建一个支持String类型的Cache
      String r = null;
      r = cache.run(1, 2, 'a', "null");
      System.out.println(r); // 输出: null
      r = cache.run(1, 2, 'a', "null");
      System.out.println(r); // 输出: null (从缓存中获取)
      r = cache.run(2, 2, 'b', "another");
      System.out.println(r); // 输出: another
      r = cache.run(2, 2, 'b', "another"); 
      System.out.println(r); // 输出: another (从缓存中获取)
  }
}

// 说起来这个是怎么生成的。
class MyFun implements Function<String> {

  int a;
  int b;
  char c;
  String s;

  MyFun(int a, int b, char c, String s) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.s = s;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + a;
    result = prime * result + b;
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    MyFun other = (MyFun) obj;
    if (a != other.a)
      return false;
    if (b != other.b)
      return false;
    return true;
  }

  @Override
  public String run() {
    return s;
  }
}
